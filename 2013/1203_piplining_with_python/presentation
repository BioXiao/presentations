<!DOCTYPE html>
<html>
  <head>
    <title>Pipelining with Python</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <style type="text/css">
      /* Slideshow styles */
    </style>
    <link rel="stylesheet" href="styles.css"> 
  </head>
  <body>
    <textarea id="source">

class: center, middle

# Pipelining with Python
### Lee Mendelowitz

---
# Outline

1. Python for Shell Scripting
2. Ruffus

---

# Python for Shell Scripting

Python has built-in modules which are useful for writing Python scripts to replace
bash scripts:

<div class="bgblue">

-  .bold[sys]
-  .bold[os]
-  .bold[subprocess]
-  .bold[glob]
-  .bold[shutil]

 </div>

---

# sys module
 - File handles to:
    - standard input (**sys.stdin**)
    - standard output (**sys.stdout**)
    - standard error (**sys.stderr**)
 - **argv**: list of command line arguments

 # glob module
 - **glob.glob( *pathname* ) **: Return a list of path names matching *pathname*, with Unix expansion support for \* and ?.

---
# os module

- **os.environ**: Dictionary with environmental variables and their values
- **os.chdir( *path* )**: Change current working directory
- **os.getcwd()**: Get current working directory
- **os.symlink( *source, link_name* )**: Create a symbolic link.
- **os.unlink( *path* )**, **os.remove( *path* )**: Remove a file
- **os.walk( *path* )**: Walk the directory tree rooted at path

# os.path module
 - **os.path.abspath( *path* )**: Return the absolute path
 - **os.path.split( *path* )**: Split a path into (root, filename)
 - **os.path.splitext( *path* )**: Split a path into (root, extension)
 - **os.path.join( *path1*, \[*path2*,...\] )**: Join path components intelligently


---

# Introduction

    </textarea>


    <script src="http://gnab.github.io/remark/downloads/remark-0.5.9.min.js" type="text/javascript">
    </script>
    <script type="text/javascript">
      var slideshow = remark.create();
    </script>

  </body>
</html>